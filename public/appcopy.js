import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import 'normalize.css';
import { TransitionGroup, CSSTransition } from 'react-transition-group';
import '../styles/index.scss';
import { useState, useEffect, useRef } from 'react';

function MyApp({ Component, pageProps }) {
  const router = useRouter();
  const { pathname } = router;

  const [isLoading, setIsLoading] = useState(false);
  const [componentsHistory, setComponentsHistory] = useState({
    cur: {
      path: pathname,
      component: Component,
    },
    prev: {
      path: pathname,
      component: Component,
    },
  });

  const [isShow, setIsShow] = useState(true);

  const pathsList = useRef(new Set());

  const pathnameRef = useRef({ pathname });
  pathnameRef.current.pathname = pathname;

  const { cur, prev } = componentsHistory;

  const onLoaderAnimationEnd = () => {
    setIsLoading(false);
    // setIsSwap(true);
  };

  useEffect(() => {
    const loadingStart = (url) => {
      const path = url.match(/^[^?]*/g)[0]; // ????????? get some kind of url parser????
      if (!pathsList.current.has(path)) setIsLoading(true);
    };

    router.events.on('routeChangeStart', loadingStart);
  }, []);

  useEffect(() => {
    pathsList.current.add(pathname);
    setComponentsHistory({
      cur: {
        path: pathname,
        component: Component,
      },
      prev: { ...componentsHistory.cur },
    });
  }, [Component]);

  const [isSwap, setIsSwap] = useState(false);

  console.log({ isSwap });

  return (
    <>
      <Head>
        <title>Next App</title>
        <meta name='description' content='Generated by create next app' />
      </Head>

      <header className='navbar'>
        <Link href={`/?from=${pathname}`}>Home</Link>
        <Link href={`/about?from=${pathname}`}>About</Link>
        <Link href={`/testpage?from=${pathname}`}>TestPage</Link>
        <button onClick={() => setIsShow(!isShow)}>
          {isShow ? 'Hide prev' : 'Show prev'}
        </button>
        <button onClick={() => setIsSwap(!isSwap)}>Swap components</button>
      </header>

      <div className='section-slider'>
        <TransitionGroup component={null}>
          <CSSTransition key={cur.pathname} classNames='section' timeout={1000}>
            {isLoading ? (
              <prev.component {...pageProps} />
            ) : (
              <cur.component {...pageProps} />
            )}
          </CSSTransition>
          {/* {!isSwap && (
            <CSSTransition key={cur.pathname} classNames='section' timeout={1000}>
              {isSwap ? (
                <cur.component {...pageProps} />
              ) : (
                <prev.component {...pageProps} />
              )}
            </CSSTransition>
          )}
          {isSwap && (
            <CSSTransition key={cur.pathname} classNames='section' timeout={1000}>
              {isSwap ? (
                <cur.component {...pageProps} />
              ) : (
                <prev.component {...pageProps} />
              )}
            </CSSTransition>
          )} */}
          {/* <CSSTransition
            key={isSwap ? prev.pathname : cur.pathname}
            classNames='section'
            timeout={1000}
          >
            {isSwap ? (
              <prev.component {...pageProps} />
            ) : (
              <cur.component {...pageProps} />
            )}
          </CSSTransition> */}
          {/* <CSSTransition
            key={isSwap ? cur.pathname : prev.pathname}
            classNames='section'
            timeout={1000}
          >
            {isSwap ? (
              <cur.component {...pageProps} />
            ) : (
              <prev.component {...pageProps} />
            )}
          </CSSTransition> */}
          {/* <CSSTransition key={router.route} classNames='section' timeout={1000}>
            <Component {...pageProps} />
          </CSSTransition> */}
        </TransitionGroup>
      </div>

      {isLoading && <div onAnimationEnd={onLoaderAnimationEnd} className='page-loader' />}
    </>
  );
}

export default MyApp;

// const loadingComplete = () => setIsLoading(false);
// router.events.on

// router.events.on('routeChangeComplete', loadingComplete);
// router.events.on('routeChangeStart', loadingStart);
