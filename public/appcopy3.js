import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import 'normalize.css';
import { TransitionGroup, CSSTransition } from 'react-transition-group';
import '../styles/index.scss';
import { useState, useEffect, useRef, useLayoutEffect } from 'react';

const routes = [{ path: '/' }, { path: '/about' }, { path: '/testpage' }];

const getDir = (pathname, from) => {
  const pathname_i = routes.findIndex((el) => el.path === pathname);
  const from_i = routes.findIndex((el) => el.path === from);

  const diff = pathname_i - from_i;

  let dir = null;
  if (diff < 0) dir = 'left';
  if (diff > 0) dir = 'right';

  return dir;
};

function MyApp({ Component, pageProps }) {
  const router = useRouter();
  const { pathname } = router;

  const ComponentRef = useRef(Component);
  ComponentRef.current = Component;

  const pathnameRef = useRef(pathname);
  pathnameRef.current = pathname;

  const [isLoading, setIsLoading] = useState(false);
  const isLoadingRef = useRef(isLoading);
  isLoadingRef.current = isLoading;

  const [dir, setDir] = useState(null);

  const NewComponentRef = useRef(null);

  const [RenderedComponent, setRenderedComponent] = useState({
    pathname,
    Component,
  });
  const RenderedComponentRef = useRef(RenderedComponent);
  RenderedComponentRef.current = RenderedComponent;

  const isComponentTransition = useRef(false);

  // console.log(Component, Component.name);

  const pathsList = useRef(new Set([pathname]));

  const onLoaderAnimationEnd = () => {
    setIsLoading(false);

    // console.log(NewComponentRef.current);

    if (NewComponentRef.current) {
      setRenderedComponent({ ...NewComponentRef.current });
    }
  };

  const onSectionExited = () => {
    isComponentTransition.current = false;

    pathsList.current.add(pathnameRef.current);

    const dir = getDir(pathnameRef.current, RenderedComponentRef.pathname);
    setDir(dir);

    setTimeout(() => {
      NewComponentRef.current = null;

      setRenderedComponent({
        Component: ComponentRef.current,
        pathname: pathnameRef.current,
      });
    }, 500);

    // console.log('fire!');
    // if (RenderedComponent.Component.name !== Component.name)
    // console.log(Component.name, pathname, dir, ComponentRef.current.name);
  };

  useEffect(() => {
    const loadingStart = (url) => {
      // console.log('routeChangeStart!', url);
      const path = url.match(/^[^?]*/g)[0]; // ????????? get some kind of url parser????

      if (RenderedComponentRef.current.pathname !== path) {
        if (!pathsList.current.has(path)) {
          setIsLoading(true);
        }
      }
    };

    const loadingEnd = (url) => {
      // console.log('routeChangeComplete!', url);
      if (!isLoadingRef.current && NewComponentRef.current) {
        setRenderedComponent({ ...NewComponentRef.current });
      }
    };

    router.events.on('routeChangeStart', loadingStart);
    router.events.on('routeChangeComplete', loadingEnd);

    return () => {
      router.events.off('routeChangeStart', loadingStart);
      router.events.off('routeChangeComplete', loadingEnd);
    };
  }, []);

  useEffect(() => {
    // console.log('Component changed', Component.name, pathname, dir);
    // !NewComponentRef.current && Component.name !== RenderedComponent.Component.name
    // !isComponentTransition
    if (
      !NewComponentRef.current &&
      Component.name !== RenderedComponent.Component.name &&
      !isComponentTransition.current
    ) {
      isComponentTransition.current = true;
      NewComponentRef.current = { pathname, Component };

      pathsList.current.add(pathname);

      const dir = getDir(pathname, RenderedComponent.pathname);
      setDir(dir);
    }
  }, [Component]);

  // useEffect(() => {}, [isComponentTransition]);

  return (
    <>
      <Head>
        <title>Next App</title>
        <meta name='description' content='Generated by create next app' />
      </Head>

      <header className='navbar'>
        <Link href={'/'}>Home</Link>
        <Link href={'/about'}>About</Link>
        <Link href={'/testpage'}>TestPage</Link>
      </header>

      <div className='section-slider'>
        <TransitionGroup component={null}>
          <CSSTransition
            key={RenderedComponent.pathname}
            classNames='section'
            timeout={1000}
            onExited={onSectionExited}
          >
            <RenderedComponent.Component {...pageProps} dir={dir} />
          </CSSTransition>
        </TransitionGroup>
      </div>

      {isLoading && <div onAnimationEnd={onLoaderAnimationEnd} className='page-loader' />}
    </>
  );
}

export default MyApp;

// const loadingComplete = () => setIsLoading(false);
// router.events.on

// router.events.on('routeChangeComplete', loadingComplete);
// router.events.on('routeChangeStart', loadingStart);
