import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import 'normalize.css';
import { TransitionGroup, CSSTransition } from 'react-transition-group';
import '../styles/index.scss';
import { useState, useEffect, useRef } from 'react';
import { useStateWithRef } from '../helpers/hooks';

const routes = [
  { path: '/' },
  { path: '/about' },
  { path: '/testpage' },
  { path: '/somerandompage' },
];

const getPath = (pathname, dir) => {
  const pathname_i = routes.findIndex((el) => el.path === pathname);
  let new_pathname_i = (pathname_i + dir) % routes.length;
  if (new_pathname_i < 0) new_pathname_i = routes.length - 1;
  return routes.find((el, i) => i === new_pathname_i).path;
};

const getDir = (pathname, from) => {
  const pathname_i = routes.findIndex((el) => el.path === pathname);
  const from_i = routes.findIndex((el) => el.path === from);

  const diff = pathname_i - from_i;

  let dir = null;
  if (diff < 0) dir = 'left';
  if (diff > 0) dir = 'right';

  return dir;
};

function MyApp({ Component, pageProps }) {
  const router = useRouter();
  const { pathname } = router;

  const [showLoader, setShowLoader] = useState(false);
  const [showNavigation, setShowNavigation] = useState(true);

  const [immediateTransition, setImmediateTransition] = useState(false);

  const [dir, setDir] = useState(null);

  // New Component
  const [NewComponent, setNewComponent] = useState(null);
  // Rendered Component
  const [RenderedComponent, setRenderedComponent, RenderedComponentRef] = useStateWithRef(
    {
      pathname,
      Component,
    }
  );
  // ==================

  const pathsList = useRef(new Set([pathname]));

  const onLoaderAnimationEnd = () => {
    setShowLoader(false);

    if (NewComponent) {
      setRenderedComponent({ ...NewComponent });
    }
  };

  const onArrowExited = () => {
    if (NewComponent && !showLoader) {
      setRenderedComponent({ ...NewComponent });
    }
  };

  const onSectionExited = () => {
    if (Component.name === NewComponent.Component.name) {
      setShowNavigation(true);
      setImmediateTransition(false);
    } else {
      setImmediateTransition(true);
    }
    setNewComponent(null);
  };

  useEffect(() => {
    const loadingStart = (url) => {
      const path = url.match(/^[^?]*/g)[0];

      if (RenderedComponentRef.current.pathname !== path) {
        setShowNavigation(false); // ?????

        if (!pathsList.current.has(path)) setShowLoader(true);
      }
    };

    router.events.on('routeChangeStart', loadingStart);

    return () => {
      router.events.off('routeChangeStart', loadingStart);
    };
  }, []);

  useEffect(() => {
    if (!NewComponent && Component.name !== RenderedComponent.Component.name) {
      setShowNavigation(false);

      if (immediateTransition && !pathsList.current.has(pathname)) setShowLoader(true);
      // Add the incoming path into pathlist history
      pathsList.current.add(pathname);

      // Find new direction
      const dir = getDir(pathname, RenderedComponent.pathname);
      setDir(dir);

      // Add a new component
      setNewComponent({ pathname, Component });
    }

    if (!NewComponent && Component.name === RenderedComponent.Component.name) {
      setShowNavigation(true);
    }
  }, [Component, NewComponent]);

  useEffect(() => {
    if (NewComponent && !showLoader && (showNavigation || immediateTransition)) {
      setRenderedComponent({ ...NewComponent });
    }
  }, [NewComponent]);

  const onClickNext = () => router.push(getPath(pathname, 1));

  const onClickPrev = () => router.push(getPath(pathname, -1));

  return (
    <>
      <Head>
        <title>Next App</title>
        <meta name='description' content='Generated by create next app' />
      </Head>

      <header className='navbar'>
        <Link href={'/'}>Home</Link>
        <Link href={'/about'}>About</Link>
        <Link href={'/testpage'}>TestPage</Link>
        <Link href={'/somerandompage'}>SomeRandomPage</Link>
      </header>

      <CSSTransition
        classNames={'arrow__right'}
        in={showNavigation}
        timeout={500}
        onExited={onArrowExited}
      >
        <div className='arrow__right'>
          <button onClick={onClickNext}>Next</button>
        </div>
      </CSSTransition>
      <CSSTransition classNames={'arrow__left'} timeout={500} in={showNavigation}>
        <div className='arrow__left'>
          <button onClick={onClickPrev}>Prev</button>
        </div>
      </CSSTransition>

      <div className='section-slider'>
        <TransitionGroup component={null}>
          <CSSTransition
            key={RenderedComponent.pathname}
            classNames='section'
            timeout={800}
            onExited={onSectionExited}
          >
            <RenderedComponent.Component {...pageProps} dir={dir} />
          </CSSTransition>
        </TransitionGroup>
      </div>

      <CSSTransition
        classNames={'page-loader'}
        timeout={800}
        in={showLoader}
        unmountOnExit
        onEntered={onLoaderAnimationEnd}
      >
        <div className='page-loader' />
      </CSSTransition>
    </>
  );
}

export default MyApp;
