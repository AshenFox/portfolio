import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import 'normalize.css';
import { TransitionGroup, CSSTransition } from 'react-transition-group';
import '../styles/index.scss';
import { useState, useEffect, useRef, useLayoutEffect } from 'react';
import { useStateWithRef } from '../helpers/hooks';

const routes = [{ path: '/' }, { path: '/about' }, { path: '/testpage' }];

const getDir = (pathname, from) => {
  const pathname_i = routes.findIndex((el) => el.path === pathname);
  const from_i = routes.findIndex((el) => el.path === from);

  const diff = pathname_i - from_i;

  let dir = null;
  if (diff < 0) dir = 'left';
  if (diff > 0) dir = 'right';

  return dir;
};

function MyApp({ Component, pageProps }) {
  const router = useRouter();
  const { pathname } = router;

  const [showLoader, setShowLoader] = useState(false);

  const [dir, setDir] = useState(null);

  // New Component
  const [NewComponent, setNewComponent] = useState(null);
  // Rendered Component
  const [RenderedComponent, setRenderedComponent, RenderedComponentRef] = useStateWithRef(
    {
      pathname,
      Component,
    }
  );
  // ==================

  const pathsList = useRef(new Set([pathname]));

  const onLoaderAnimationEnd = () => {
    setShowLoader(false);

    if (NewComponent) {
      setRenderedComponent({ ...NewComponent });
    }
  };

  const onSectionExited = () => {
    setNewComponent(null);
  };

  useEffect(() => {
    const loadingStart = (url) => {
      const path = url.match(/^[^?]*/g)[0];

      if (RenderedComponentRef.current.pathname !== path && !pathsList.current.has(path))
        setShowLoader(true);
    };

    router.events.on('routeChangeStart', loadingStart);

    return () => {
      router.events.off('routeChangeStart', loadingStart);
    };
  }, []);

  useEffect(() => {
    if (!NewComponent && Component.name !== RenderedComponent.Component.name) {
      // Add the incoming path into pathlist history
      pathsList.current.add(pathname);

      // Find new direction
      const dir = getDir(pathname, RenderedComponent.pathname);
      setDir(dir);

      // Add a new component
      setNewComponent({ pathname, Component });
    }
  }, [Component, NewComponent]);

  useEffect(() => {
    if (NewComponent && !showLoader) {
      setRenderedComponent({ ...NewComponent });
    }
  }, [NewComponent]);

  return (
    <>
      <Head>
        <title>Next App</title>
        <meta name='description' content='Generated by create next app' />
      </Head>

      <header className='navbar'>
        <Link href={'/'}>Home</Link>
        <Link href={'/about'}>About</Link>
        <Link href={'/testpage'}>TestPage</Link>
      </header>

      <div className='section-slider'>
        <TransitionGroup component={null}>
          <CSSTransition
            key={RenderedComponent.pathname}
            classNames='section'
            timeout={1000}
            onExited={onSectionExited}
          >
            <RenderedComponent.Component {...pageProps} dir={dir} />
          </CSSTransition>
        </TransitionGroup>
      </div>

      {showLoader && (
        <div onAnimationEnd={onLoaderAnimationEnd} className='page-loader' />
      )}
    </>
  );
}

export default MyApp;
