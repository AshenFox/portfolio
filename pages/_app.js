import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import 'normalize.css';
import { TransitionGroup, CSSTransition } from 'react-transition-group';
import '../styles/index.scss';
import { useState, useEffect, useRef } from 'react';

function MyApp({ Component, pageProps }) {
  const router = useRouter();
  const { pathname } = router;

  const [isLoading, setIsLoading] = useState(false);
  const isLoadingRef = useRef(isLoading);
  isLoadingRef.current = isLoading;

  const NewComponent = useRef(Component);

  const [RenderedComponent, setRenderedComponent] = useState({
    pathname,
    Component,
  });

  const pathsList = useRef(new Set());

  const onLoaderAnimationEnd = () => {
    setIsLoading(false);
    setRenderedComponent({ ...NewComponent.current });
  };

  useEffect(() => {
    const loadingStart = (url) => {
      console.log('Fire!');
      const path = url.match(/^[^?]*/g)[0]; // ????????? get some kind of url parser????
      if (!pathsList.current.has(path)) setIsLoading(true);
    };

    const loadingEnd = (url) => {
      if (!isLoadingRef.current) setRenderedComponent({ ...NewComponent.current });
    };

    router.events.on('routeChangeStart', loadingStart);
    router.events.on('routeChangeComplete', loadingEnd);
  }, []);

  useEffect(() => {
    pathsList.current.add(pathname);
    NewComponent.current = { pathname, Component };
  }, [Component]);

  return (
    <>
      <Head>
        <title>Next App</title>
        <meta name='description' content='Generated by create next app' />
      </Head>

      <header className='navbar'>
        <Link href={`/?from=${pathname}`}>Home</Link>
        <Link href={`/about?from=${pathname}`}>About</Link>
        <Link href={`/testpage?from=${pathname}`}>TestPage</Link>
      </header>

      <div className='section-slider'>
        <TransitionGroup component={null}>
          <CSSTransition
            key={RenderedComponent.pathname}
            classNames='section'
            timeout={1000}
          >
            <RenderedComponent.Component {...pageProps} />
          </CSSTransition>
        </TransitionGroup>
      </div>

      {isLoading && <div onAnimationEnd={onLoaderAnimationEnd} className='page-loader' />}
    </>
  );
}

export default MyApp;

// const loadingComplete = () => setIsLoading(false);
// router.events.on

// router.events.on('routeChangeComplete', loadingComplete);
// router.events.on('routeChangeStart', loadingStart);
